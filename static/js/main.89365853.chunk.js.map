{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","showDetails","handleDetailsButton","setState","prevState","_createClass","key","value","event","this","props","_jsxs","className","children","_jsx","summary","location","start","dateTime","description","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","handleInputChanged","target","locations","filter","toUpperCase","indexOf","handleItemClicked","suggestion","_this2","type","onChange","NumberOfEvents","numberOfEvents","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89365853.chunk.js","sourcesContent":["// src/Event.js\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass Event extends Component {\r\n  state = {\r\n    showDetails: false,\r\n  };\r\n\r\n  handleDetailsButton = () => {\r\n    this.setState((prevState) => ({ showDetails: !prevState.showDetails }));\r\n  };\r\n\r\n  render() {\r\n    const { event } = this.props;\r\n    const { showDetails } = this.state;\r\n\r\n    return (\r\n      <div className=\"event\">\r\n        <h1 className=\"event-summary\">{event.summary}</h1>\r\n        {showDetails && (\r\n          <div className=\"event-details\">\r\n            <p className=\"event-location\">{event.location}</p>\r\n            <p className=\"event-date\">{event.start.dateTime}</p>\r\n            <p className=\"event-description\">{event.description}</p>\r\n          </div>\r\n        )}\r\n        <button className=\"details-btn\" onClick={this.handleDetailsButton}>\r\n          {showDetails ? \"Hide Details\" : \"Show Details\"}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Event;\r\n","// src/EventList.js\r\n\r\nimport React, { Component } from \"react\";\r\nimport Event from \"./Event\";\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n    const { events } = this.props;\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {events.map((event) => (\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","// src/CitySearch.js\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass CitySearch extends Component {\r\n  state = {\r\n    query: \"\",\r\n    suggestions: [],\r\n  };\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    this.setState({\r\n      query: value,\r\n      suggestions,\r\n    });\r\n  };\r\n\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"city\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n        <ul className=\"suggestions\">\r\n          {this.state.suggestions.map((suggestion) => (\r\n            <li\r\n              key={suggestion}\r\n              onClick={() => this.handleItemClicked(suggestion)}\r\n            >\r\n              {suggestion}\r\n            </li>\r\n          ))}\r\n          <li key=\"all\">\r\n            <b>See all cities</b>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;\r\n","// src/NumberOfEvents.js\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass NumberOfEvents extends Component {\r\n  state = {\r\n    numberOfEvents: 32,\r\n  };\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({ numberOfEvents: value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"NumberOfEvents\">\r\n        <label>Number of Events: </label>\r\n        <input\r\n          type=\"number\"\r\n          className=\"number-input\"\r\n          value={this.state.numberOfEvents}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport EventList from \"./EventList\";\r\nimport CitySearch from \"./CitySearch\";\r\nimport NumberOfEvents from \"./NumberOfEvents\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <CitySearch />\r\n        <NumberOfEvents />\r\n        <EventList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}